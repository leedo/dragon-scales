#!/usr/bin/env perl

use v5.14;

use Getopt::Long;
use AnyEvent::rrdcached;
use Twiggy::Server;
use Plack::Builder;

my $dir;
my %twiggy = (host => "0.0.0.0", port => 5000);

GetOptions(
  "cachedir=s" => \$dir,
  "listen=s" => \($twiggy{listen}),
  "port=s"   => \($twiggy{port}),
  "host=s"   => \($twiggy{host}),
);

my $rrdcached = AnyEvent::rrdcached->new($dir);
$rrdcached->spawn->recv;

my @batches;

my $app = builder {
  mount "/dragon" => sub {
    my $env = shift;
    sub {
      my $respond = shift;

      if (!@batches) {
        $rrdcached->command("BATCH", sub {
          my ($batch, $err) = @_;

          if ($err) {
            $respond->([500, ["Content-Type", "text/plain"], [$err]]);
            return;
          }

          $rrdcached->batch_command($batch, "FARTS");
          $respond->([200, ["Content-Type", "text/plain"], ["ok"]]);
          push @batches, [$batch, 0];
        });

        return;
      }

      $rrdcached->batch_command($batches[0][0], "FARTS");

      if ($batches[0][1]++ > 5) {
        my $batch = shift @batches;
        $rrdcached->batch_complete($batch->[0], sub {
          my ($res, $err) = @_;
          if ($err) {
            $respond->([500, ["Content-Type", "text/plain"], [$err]]);
            return;
          }
          $respond->([200, ["Content-Type", "text/plain"], [ join "\n", @$res]]);
        });
      }
      else {
        $respond->([200, ["Content-Type", "text/plain"], ["ok"]]);
      }
    };
  };
};

Twiggy::Server->new(%twiggy)->run($app);
